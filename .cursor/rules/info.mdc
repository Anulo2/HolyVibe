---
description: 
globs: 
alwaysApply: true
---
# Family Management Application - Complete Project Description

## Project Overview

A comprehensive family management platform built with Next.js 15, TypeScript, Tailwind CSS, and Supabase. The application allows parents to manage their families, children, events, and authorized persons for child pickup/supervision.

## Tech Stack

- **Frontend**: Next.js 15 (App Router), TypeScript, Tailwind CSS
- **UI Components**: shadcn/ui components
- **Backend**: Supabase (PostgreSQL database, Authentication, Real-time)
- **Authentication**: Supabase Auth with custom user management
- **Styling**: Tailwind CSS with dark/light theme support
- **Icons**: Lucide React


## Database Schema

### Core Tables

#### 1. `users` - User Management

```sql
- id (uuid, primary key, references auth.users)
- email (text, unique, not null)
- full_name (text, not null)
- avatar_url (text, nullable)
- phone (text, nullable)
- role_id (integer, foreign key to roles, default: 1)
- is_active (boolean, default: true)
- created_at (timestamp)
- updated_at (timestamp)
```

#### 2. `roles` - User Roles

```sql
- id (serial, primary key)
- name (text, unique) -- 'user', 'animatore', 'editor', 'amministratore'
- description (text)
- permissions (jsonb) -- Role-based permissions
```

#### 3. `families` - Family Groups

```sql
- id (uuid, primary key)
- name (text, not null)
- description (text, nullable)
- created_by (uuid, foreign key to users)
- created_at (timestamp)
- updated_at (timestamp)
```

#### 4. `family_members` - Family Membership

```sql
- id (uuid, primary key)
- family_id (uuid, foreign key to families)
- user_id (uuid, foreign key to users)
- role ('parent', 'guardian')
- is_admin (boolean, default: false)
- joined_at (timestamp)
- created_at (timestamp)
- updated_at (timestamp)
```

#### 5. `children` - Child Records

```sql
- id (uuid, primary key)
- family_id (uuid, foreign key to families)
- first_name (text, not null)
- last_name (text, not null)
- birth_date (date, not null)
- birth_place (text, nullable)
- fiscal_code (text, nullable, unique)
- gender ('M', 'F', 'O', nullable)
- allergies (text, nullable)
- medical_notes (text, nullable)
- avatar_url (text, nullable)
- created_at (timestamp)
- updated_at (timestamp)
```

#### 6. `authorized_persons` - Pickup Authorization

```sql
- id (uuid, primary key)
- family_id (uuid, foreign key to families)
- full_name (text, not null)
- relationship (text, not null) -- 'Nonno', 'Nonna', 'Zio', etc.
- phone (text, nullable)
- email (text, nullable)
- avatar_url (text, nullable)
- document_type (text, nullable) -- 'Carta d\'identit√†', 'Patente', etc.
- document_number (text, nullable)
- document_expiry (date, nullable)
- is_active (boolean, default: true)
- created_at (timestamp)
- updated_at (timestamp)
```

#### 7. `events` - Event Management

```sql
- id (uuid, primary key)
- title (text, not null)
- description (text, not null)
- start_date (timestamp, not null)
- end_date (timestamp, nullable)
- location (text, not null)
- min_age (integer, not null)
- max_age (integer, not null)
- max_participants (integer, not null)
- current_participants (integer, default: 0)
- price (decimal, nullable)
- status ('draft', 'open', 'closed', 'full', 'cancelled')
- image_url (text, nullable)
- created_by (uuid, foreign key to users)
- created_at (timestamp)
- updated_at (timestamp)
```

#### 8. `event_registrations` - Event Signups

```sql
- id (uuid, primary key)
- event_id (uuid, foreign key to events)
- child_id (uuid, foreign key to children)
- parent_id (uuid, foreign key to users)
- status ('pending', 'confirmed', 'cancelled', 'waitlist')
- payment_status ('pending', 'completed', 'failed', 'refunded')
- registration_date (timestamp)
- notes (text, nullable)
- created_at (timestamp)
- updated_at (timestamp)
```

#### 9. `registration_authorized_persons` - Event Pickup Authorization

```sql
- id (uuid, primary key)
- registration_id (uuid, foreign key to event_registrations)
- authorized_person_id (uuid, foreign key to authorized_persons)
- created_at (timestamp)
```

#### 10. `invitations` - Family Invitations

```sql
- id (uuid, primary key)
- family_id (uuid, foreign key to families)
- email (text, not null)
- invited_by (uuid, foreign key to users)
- message (text, nullable)
- status ('pending', 'accepted', 'rejected', 'expired')
- token (text, unique, not null)
- expires_at (timestamp, not null)
- accepted_at (timestamp, nullable)
- created_at (timestamp)
- updated_at (timestamp)
```

## Application Structure

### Authentication System

- **Supabase Auth Integration**: Email/password authentication
- **Custom User Management**: Extended user profiles in custom users table
- **Role-Based Access Control**: Different permission levels (user, animatore, editor, amministratore)
- **Protected Routes**: Middleware-based route protection
- **Session Management**: Persistent sessions with proper token handling


### User Roles & Permissions

1. **User (Genitore)**: Basic family management, child registration
2. **Animatore**: Event assistance, limited admin functions
3. **Editor**: Event creation and management
4. **Amministratore**: Full system access, user management


### Core Features

#### 1. Family Management (`/famiglia`)

- **Multi-Family Support**: Users can belong to multiple families
- **Family Creation**: Create and name family groups
- **Member Management**: Invite other parents to join families
- **Child Management**: Add, edit, remove children with full details
- **Authorized Persons**: Manage pickup authorization for non-parents


#### 2. Event Management (`/eventi`)

- **Event Discovery**: Browse available events with filtering
- **Event Registration**: Register children for events
- **Pickup Authorization**: Select authorized persons for event pickup
- **Age-Based Filtering**: Events filtered by child age ranges
- **Availability Tracking**: Real-time participant count management


#### 3. Invitation System (`/inviti`)

- **Send Invitations**: Invite other parents to join families
- **Invitation Management**: Track sent and received invitations
- **Email Notifications**: Automated invitation emails
- **Acceptance/Rejection**: Handle invitation responses


#### 4. User Profile (`/profilo`)

- **Profile Management**: Update personal information
- **Avatar Upload**: Profile picture management
- **Contact Information**: Phone, email updates
- **Account Settings**: Password changes, preferences


#### 5. Admin Panel (`/admin`)

- **Dashboard**: System statistics and overview
- **User Management**: Create, edit, suspend users
- **Event Management**: Full event CRUD operations
- **Registration Management**: View and manage all registrations
- **Role Management**: Assign and modify user roles


### UI Components & Design

#### Layout & Navigation

- **Responsive Sidebar**: Collapsible navigation with shadcn/ui Sidebar
- **Theme Toggle**: Light/dark mode support
- **User Dropdown**: Profile access and logout
- **Breadcrumb Navigation**: Clear page hierarchy


#### Forms & Dialogs

- **Modal Dialogs**: Add/edit forms in overlay modals
- **Multi-step Forms**: Tabbed interfaces for complex forms
- **Form Validation**: Client-side and server-side validation
- **Loading States**: Proper loading indicators


#### Data Display

- **Data Tables**: Sortable, filterable tables with pagination
- **Card Layouts**: Alternative grid view for events/users
- **Avatar Components**: User and child profile pictures
- **Badge System**: Status indicators for various entities


### API Integration

#### Supabase Services

- **Authentication**: Login, signup, password reset
- **Database Operations**: CRUD operations via Supabase client
- **Real-time Subscriptions**: Live updates for registrations
- **File Storage**: Avatar and event image uploads


#### Custom Services

- **Family Service**: Family and member management
- **Event Service**: Event and registration management
- **User Service**: Profile and preference management
- **Invitation Service**: Invitation workflow management


### Security Features

- **Row Level Security (RLS)**: Database-level access control
- **Input Sanitization**: XSS protection
- **CSRF Protection**: Built-in Next.js protection
- **Secure Authentication**: Supabase Auth with JWT tokens
- **Role-Based Access**: Function-level permission checks


### Development Patterns

#### Code Organization

- **Feature-Based Structure**: Organized by functionality
- **Component Reusability**: Shared UI components
- **Custom Hooks**: Reusable logic extraction
- **Type Safety**: Full TypeScript implementation


#### State Management

- **React Context**: Authentication state
- **Local State**: Component-specific state
- **Server State**: Supabase real-time subscriptions
- **Form State**: React Hook Form integration


#### Error Handling

- **Global Error Boundaries**: Application-level error catching
- **Form Validation**: Field-level and form-level validation
- **API Error Handling**: Graceful error responses
- **User Feedback**: Toast notifications and alerts


### Deployment & Configuration

- **Environment Variables**: Supabase configuration
- **Database Migrations**: Version-controlled schema changes
- **Seed Data**: Initial roles and test data
- **Production Optimization**: Build optimization and caching


This comprehensive description covers all aspects of the family management application, from database design to user interface implementation, making it suitable for use as a cursor rule or development guide.


To configure the generation, complete these steps: