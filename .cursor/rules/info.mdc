---
description: 
globs: 
alwaysApply: true
---
# Church Management Application - Complete Project Description

## Project Overview

A comprehensive church/parish events management platform built with React, TypeScript, Tailwind CSS, and ElysiaJS. The application allows parents to manage their families, children, events, and authorized persons for child pickup/supervision.

## Tech Stack

- **Frontend**: Tanstack Router, React, TypeScript, Tailwind CSS, elysia eden, tanstack query
- **UI Components**: shadcn/ui components
- **Backend**: ElysiaJS, Drizzle ORM
- **Authentication**: Better-auth
- **Styling**: Tailwind CSS with dark/light theme support
- **Icons**: Lucide React


## Application Structure

### Database Schema

The application uses SQLite with Drizzle ORM. The database structure consists of the following main entities:

#### Authentication Tables (Better Auth)

- **user**: Core user table with id, name, email, phone number, birth date, and verification status
- **session**: User sessions with tokens, expiration, IP tracking, and user agent
- **account**: OAuth accounts linking users to external providers
- **verification**: Email/phone verification tokens and codes

#### Organization Management (Better Auth)

- **organization**: Organizations/churches with name, image, and owner
- **organizationMember**: Users belonging to organizations with roles
- **invitation**: Organization invitations with email, token, and expiry

#### Family Management

- **families**: Family groups with name, description, and creator
- **familyMembers**: Users belonging to families with roles (parent/guardian) and admin status
- **children**: Child records with personal info, medical notes, allergies, and family association
- **authorizedPersons**: Non-parent individuals authorized for child pickup with contact and document info

#### Event System

- **events**: Events with title, description, dates, location, age limits, capacity, and pricing
- **eventRegistrations**: Child registrations for events with status and payment tracking
- **registrationAuthorizedPersons**: Junction table linking event registrations to authorized pickup persons

#### Invitation System

- **invitations**: Family invitations with email, status, token, and expiry tracking

#### Legacy Tables

- **todos**: Simple todo items (can be removed in future versions)

#### Key Relationships

- Users can belong to multiple families as members
- Families contain multiple children and authorized persons
- Events have age-based filtering and capacity management
- Registrations link children to events with pickup authorization
- Organizations provide multi-tenancy support for different churches/parishes

#### Data Types & Constraints

- All timestamps stored as Unix timestamps with SQLite integer type
- Enums implemented as text with CHECK constraints
- Foreign keys with CASCADE delete for data integrity
- Boolean fields stored as integers (0/1)
- Prices stored as text strings for decimal precision

### Authentication System

- **Better Auth Integration**: Phone number authentication
- **Role-Based Access Control**: Different permission levels (user, animatore, editor, amministratore)
- **Protected Routes**: Middleware-based route protection
- **Session Management**: Done by better-auth


### User Roles & Permissions

1. **User (Genitore)**: Basic family management, child registration
2. **Animatore**: Event assistance, limited admin functions
3. **Editor**: Event creation and management
4. **Amministratore**: Full system access, user management


### Core Features

#### 1. Family Management (`/famiglia`)

- **Multi-Family Support**: Users can belong to multiple families
- **Family Creation**: Create and name family groups
- **Member Management**: Invite other parents to join families
- **Child Management**: Add, edit, remove children with full details
- **Authorized Persons**: Manage pickup authorization for non-parents


#### 2. Event Management (`/eventi`)

- **Event Discovery**: Browse available events with filtering
- **Event Registration**: Register children for events
- **Pickup Authorization**: Select authorized persons for event pickup
- **Age-Based Filtering**: Events filtered by child age ranges
- **Availability Tracking**: Real-time participant count management


#### 3. Invitation System (`/inviti`)

- **Send Invitations**: Invite other parents to join families
- **Invitation Management**: Track sent and received invitations
- **Email/message Notifications**: Automated invitation emails/messages
- **Acceptance/Rejection**: Handle invitation responses


#### 4. User Profile (`/profilo`)

- **Profile Management**: Update personal information
- **Avatar Upload**: Profile picture management
- **Contact Information**: Phone, email updates
- **Account Settings**: Password changes, preferences


#### 5. Admin Panel (`/admin`)

- **Dashboard**: System statistics and overview
- **User Management**: Create, edit, suspend users
- **Event Management**: Full event CRUD operations
- **Registration Management**: View and manage all registrations
- **Role Management**: Assign and modify user roles


### UI Components & Design

#### Layout & Navigation

- **Responsive Sidebar**: Collapsible navigation with shadcn/ui Sidebar
- **Theme Toggle**: Light/dark mode support
- **User Dropdown**: Profile access and logout
- **Breadcrumb Navigation**: Clear page hierarchy


#### Forms & Dialogs

- **Modal Dialogs**: Add/edit forms in overlay modals
- **Multi-step Forms**: Tabbed interfaces for complex forms
- **Form Validation**: Client-side and server-side validation
- **Loading States**: Proper loading indicators


#### Data Display

- **Data Tables**: Sortable, filterable tables with pagination
- **Card Layouts**: Alternative grid view for events/users
- **Avatar Components**: User and child profile pictures
- **Badge System**: Status indicators for various entities



### Development Patterns

#### Code Organization

- **Feature-Based Structure**: Organized by functionality
- **Component Reusability**: Shared UI components
- **Custom Hooks**: Reusable logic extraction
- **Type Safety**: Full TypeScript implementation


#### State Management

- **React Context**: Authentication state
- **Local State**: Component-specific state
- **Form State**: React Hook Form integration


#### Error Handling

- **Global Error Boundaries**: Application-level error catching
- **Form Validation**: Field-level and form-level validation
- **API Error Handling**: Graceful error responses
- **User Feedback**: Toast notifications and alerts


### Deployment & Configuration

- **Database Migrations**: Version-controlled schema changes
- **Seed Data**: Initial roles and test data
- **Production Optimization**: Build optimization and caching


This comprehensive description covers all aspects of the events management application, from database design to user interface implementation, making it suitable for use as a cursor rule or development guide.

