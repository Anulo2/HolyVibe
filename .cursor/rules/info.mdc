---
description: 
globs: 
alwaysApply: true
---
# HolyVibe - Church Management Application

## Project Overview

HolyVibe is a comprehensive church/parish events management platform built with modern web technologies. The application enables parishes to manage families, children, events, and authorized persons for child pickup/supervision with a focus on safety and organization.

## Tech Stack

### Frontend
- **Framework**: React 19 with TypeScript
- **Routing**: TanStack Router v1.121+ with file-based routing
- **State Management**: TanStack Query (React Query) v5.80+ with ORPC integration
- **Data Tables**: TanStack Table for advanced data grids with sorting, filtering, pagination
- **Form Management**: TanStack Form for type-safe form handling
- **UI Framework**: shadcn/ui components with Radix UI primitives + bazza/ui extensions
- **Styling**: Tailwind CSS v4.1+ with dark/light theme support
- **Authentication**: Better Auth v1.2+ client integration
- **Icons**: Lucide React
- **Build Tool**: Vite v6.3+ with TypeScript native preview

### Backend  
- **Runtime**: Bun
- **Framework**: Elysia v1.3+ with TypeScript
- **API Layer**: ORPC v1.5+ (instead of REST/tRPC)
- **Database**: SQLite with Drizzle ORM v0.42+
- **Authentication**: Better Auth v1.2+ with phone number support
- **Validation**: Zod v3.25+

### Key Dependencies
- **@orpc/client & @orpc/server**: Type-safe RPC communication
- **@tanstack/react-router**: File-based routing with type safety
- **@tanstack/react-query**: Server state management
- **@tanstack/react-table**: Powerful data table components
- **@tanstack/react-form**: Type-safe form management
- **better-auth**: Modern authentication with organization support
- **drizzle-orm**: Type-safe SQL ORM
- **nanoid**: Unique ID generation
- **date-fns**: Date manipulation
- **recharts**: Chart components for admin dashboards

## Architecture & Communication

### ORPC Integration
The application uses ORPC for type-safe client-server communication:

```typescript
// Server: /server/src/orpc/server.ts
export const router = os.router({
  family: os.router({
    list: withAuth.output(SuccessResponse(z.array(...))).handler(...),
    create: withAuth.input(z.object({...})).handler(...),
    getChildren: withAuth.input(z.object({ familyId: z.string() })).handler(...),
    addChild: withAuth.input(z.object({...})).handler(...),
    getAuthorizedPersons: withAuth.input(z.object({ familyId: z.string() })).handler(...),
    addAuthorizedPerson: withAuth.input(z.object({...})).handler(...),
  }),
  events: os.router({
    list: withAuth.input(z.object({...})).handler(...),
    get: withAuth.input(z.object({ id: z.string() })).handler(...),
    create: withAuth.input(z.object({...})).handler(...),
    update: withAuth.input(z.object({...})).handler(...),
  }),
  registrations: os.router({
    list: withAuth.input(z.object({...})).handler(...),
    create: withAuth.input(z.object({...})).handler(...),
  }),
  user: os.router({
    getCurrentUserRole: withAuth.handler(...),
  })
});

// Client: /client/src/lib/orpc-client.ts
const link = new RPCLink({
  url: "http://localhost:3000/orpc",
  fetch: (input, init) => fetch(input, {
    ...init,
    credentials: "include" // For Better Auth cookies
  })
});
export const orpcClient = createORPCClient<AppRouter>(link);
```

### Authentication System
Better Auth with phone number authentication and organization support:

```typescript
// /server/src/auth.ts
export const auth = betterAuth({
  appName: "Family Management App",
  plugins: [
    organization(), // Parish/church management
    phoneNumber({
      sendOTP: ({ phoneNumber, code }) => {
        // SMS integration (Twilio, AWS SNS, etc.)
        console.log(`ðŸ“± OTP for ${phoneNumber}: ${code}`);
      },
      signUpOnVerification: {
        getTempEmail: (phoneNumber) => `${phoneNumber.replace(/[^\d]/g, "")}@family-app.com`,
      },
      otpLength: 6,
      expiresIn: 300, // 5 minutes
    })
  ],
  emailAndPassword: { enabled: false } // Phone-only authentication
});
```

## Database Schema

### Authentication & Organization (Better Auth)
- **user**: Core user table with phone authentication, name, email, birthDate
- **session**: Session management with IP/user agent tracking, tokens, expiration
- **account**: OAuth account linking with providers
- **verification**: OTP verification codes with identifiers and expiry
- **organization**: Churches/parishes with name, image, owner
- **organizationMember**: User-organization relationships with roles
- **invitation**: Organization invitation system with tokens and expiry

### Family Management
- **families**: Family groups with name, description, creator, timestamps
- **familyMembers**: Users in families with parent/guardian roles and admin status
- **children**: Child records with personal info (firstName, lastName, birthDate, birthPlace, fiscalCode, gender), medical info (allergies, medicalNotes), avatars
- **authorizedPersons**: Non-parent pickup authorization with fullName, relationship, contact info (phone, email), isActive status

### Event System  
- **events**: Events with title, description, dates (startDate, endDate), location, age limits (minAge, maxAge), capacity (maxParticipants, currentParticipants), pricing, status, imageUrl, creator
- **eventRegistrations**: Child-event registrations with status (pending, confirmed, cancelled, waitlist), paymentStatus (pending, completed, failed, refunded), registrationDate, notes
- **registrationAuthorizedPersons**: Junction table linking event registrations to authorized pickup persons

### Invitation System
- **invitations**: Family invitation tokens with email, invitedBy, message, status (pending, accepted, rejected, expired), token, expiresAt, acceptedAt

## Frontend Architecture

### Route Structure
File-based routing with TanStack Router:

```
/                     â†’ Redirects to /dashboard
/login               â†’ Authentication (phone number)
/dashboard           â†’ User dashboard with family overview
/famiglia            â†’ Family management interface
/eventi              â†’ Event browsing and registration
/profilo             â†’ User profile management  
/parrocchie          â†’ Organization/parish management
/admin               â†’ Admin panel with nested routes:
  â”œâ”€â”€ /admin/         â†’ Dashboard with statistics
  â”œâ”€â”€ /admin/eventi   â†’ Event management
  â”œâ”€â”€ /admin/utenti   â†’ User management
  â”œâ”€â”€ /admin/iscrizioni â†’ Registration management
  â”œâ”€â”€ /admin/reportistica â†’ Reports and analytics
  â””â”€â”€ /admin/impostazioni â†’ System settings
```

### Component Architecture

#### Layout Components
- **Header**: User dropdown, theme toggle, logout functionality
- **Sidebar**: Navigation with role-based visibility and responsive design
- **RootComponent**: Layout switching based on authentication state

#### Dialog Components (Modal Forms)
- **CreaFamigliaDialog**: Family creation with name and description
- **AggiungiModificaFiglioDialog**: Child add/edit (475 lines, comprehensive form with personal info, medical details, avatar upload)
- **AggiungiModificaPersonaDialog**: Authorized person management (187 lines)
- **IscrizioneFiglioDialog**: Event registration with pickup authorization selection (413 lines)
- **InvitaGenitoreDialog**: Family invitation system (146 lines)

#### Admin Components
- **AdminStatsCards**: Key metrics and KPIs dashboard
- **AdminEventiChart**: Event analytics visualization with recharts
- **AdminRecentActivity**: Real-time activity feed
- **AdminIscrizioni**: Registration management with detailed tables
- **RegistrationDetailsDialog**: Detailed registration view with full relationship data

#### Data Table System (TanStack Table Integration)
Advanced table system with:
- **DataTableColumnHeader**: Sortable columns with indicators
- **DataTablePagination**: Pagination controls with page size selection
- **DataTableToolbar**: Search and filter controls
- **DataTableViewOptions**: Column visibility management
- **DataTableFilter**: Multi-condition filtering system with operators:
  - **Subject**: Column selection
  - **Operator**: equals, contains, startsWith, endsWith, greaterThan, lessThan, etc.
  - **Value**: Dynamic input based on data type
  - **ActiveFilters**: Visual filter management
  - **FilterActions**: Add, remove, clear operations

### Custom Hooks

#### API Integration Hooks (ORPC + TanStack Query)
```typescript
// Family Management
useFamiliesQuery() â†’ List user's families with counts
useCreateFamilyMutation() â†’ Create new family
useFamilyChildrenQuery(familyId) â†’ Get family children
useAddChildMutation() â†’ Add child to family
useUpdateChildMutation() â†’ Update child information
useFamilyAuthorizedPersonsQuery(familyId) â†’ Get authorized persons
useAddAuthorizedPersonMutation() â†’ Add authorized person
useUpdateAuthorizedPersonMutation() â†’ Update authorized person

// Event Management  
useEventsQuery(params) â†’ List events with filtering (search, minAge, maxAge, limit, offset)
useEventQuery(eventId) â†’ Get single event details
useCreateEventMutation() â†’ Create new event
useUpdateEventMutation() â†’ Update event information

// Registration Management
useRegistrationsQuery(params) â†’ List registrations with full details (RegistrationWithDetails type)
useCreateRegistrationMutation() â†’ Register child for event with authorized persons

// Authentication & User Management
useAuth() â†’ Better Auth session + user role from organization
useUserQuery() â†’ Get current user information
```

#### Utility Hooks
- **use-mobile.ts**: Responsive design detection for mobile-first approach
- **use-toast.ts**: Toast notification system with Sonner integration
- **use-debounce-callback.tsx**: Debounced callbacks for search and filters
- **use-data-table-filters.tsx**: Advanced table filtering state management

## User Roles & Permissions

### Role Hierarchy (via Better Auth Organizations)
1. **User (Genitore)**: Basic family and event management, child registration
2. **Animatore**: Event assistance, limited admin access to help with events
3. **Editor**: Event creation and content management, user assistance  
4. **Amministratore**: Full system access, user management, reporting

### Role-Based Access Control
```typescript
// Component-level protection
<RoleGuard allowedRoles={["amministratore", "editor"]}>
  <AdminContent />
</RoleGuard>

// Route-level protection  
beforeLoad: ({ context }) => {
  if (!context.auth.data?.user) {
    throw redirect({ to: "/login" });
  }
}

// Hook-based role checking
const { userRole } = useAuth();
const canAccessAdmin = ["amministratore", "editor"].includes(userRole);
```

## Key Features Implementation

### 1. Family Management (/famiglia)
- **Multi-family support**: Users can belong to multiple families as members
- **Child management**: Comprehensive child profiles with medical information, allergies, emergency contacts
- **Authorized person system**: Non-parent pickup authorization with detailed contact info
- **Real-time statistics**: Family member counts, children counts, authorized persons counts
- **Member invitation system**: Email-based invitations with secure tokens

### 2. Event Management (/eventi)  
- **Age-based filtering**: Automatic event filtering based on children's ages
- **Capacity management**: Real-time participant tracking with waitlist functionality
- **Multi-child registration**: Register multiple children for same event
- **Pickup authorization**: Event-specific authorized person selection
- **Payment tracking**: Payment status integration (pending, completed, failed, refunded)

### 3. Registration System
Type-safe registration with comprehensive relationship details:
```typescript
type RegistrationWithDetails = {
  id: string;
  eventId: string;
  status: "pending" | "confirmed" | "cancelled" | "waitlist";
  paymentStatus: "pending" | "completed" | "failed" | "refunded";
  registrationDate: string;
  notes: string | null;
  child: {
    id: string;
    firstName: string;
    lastName: string;
    birthDate: string;
    allergies: string | null;
    medicalNotes: string | null;
  };
  parent: {
    id: string;
    name: string;
    email: string;
    phoneNumber: string | null;
  };
  event: {
    id: string;
    title: string;
    startDate: string;
    endDate: string | null;
    price: string | null;
  };
  family: {
    id: string;
    name: string;
  };
  authorizedPersons: Array<{
    id: string;
    fullName: string;
    relationship: string;
    phone: string | null;
    email: string | null;
  }>;
};
```

### 4. Admin Panel (/admin)
- **Dashboard**: Statistics cards with key metrics, charts with recharts, recent activity feed
- **Event Management**: Full CRUD operations with advanced filtering and status management
- **User Management**: Role assignment, account status management, organization membership
- **Registration Management**: Detailed registration view with filtering, export capabilities
- **Reportistica**: Analytics and reporting tools with data visualization

### 5. Advanced Data Tables (TanStack Table)
- **Multi-condition filtering**: Complex filter system with subject + operator + value
- **Dynamic operators**: equals, contains, startsWith, endsWith, greaterThan, lessThan, between, isEmpty, isNotEmpty
- **Column management**: Show/hide columns, reorder, resize
- **Sorting**: Multi-column sorting with priority indicators
- **Pagination**: Configurable page sizes, jump to page
- **Export capabilities**: Data extraction in various formats
- **Responsive design**: Mobile-optimized table layouts
- **Virtualization**: Performance optimization for large datasets

## Development Patterns

### Type Safety
- **Full TypeScript**: End-to-end type safety from database to UI
- **ORPC Integration**: Automatic type generation for client/server communication
- **Zod Schemas**: Runtime validation with compile-time types
- **Generated Types**: Router types, database types, form types

### Form Management (TanStack Form)
```typescript
// Example form implementation
const form = useForm({
  defaultValues: {
    firstName: '',
    lastName: '',
    birthDate: '',
    allergies: '',
    medicalNotes: '',
  },
  onSubmit: async (values) => {
    await addChildMutation.mutateAsync({
      familyId: selectedFamilyId,
      ...values,
    });
  },
});
```

### Error Handling
```typescript
// ORPC Error handling with type safety
const withAuth = os.use(async ({ context, next }) => {
  try {
    const session = await auth.api.getSession({ headers: request.headers });
    if (!session?.user) {
      throw new ORPCError("UNAUTHORIZED", "Authentication required");
    }
    return next({ 
      context: { 
        user: session.user, 
        session: session.session 
      }
    });
  } catch (error) {
    throw new ORPCError("UNAUTHORIZED", "Authentication failed");
  }
});

// Client-side error handling
const { data, error, isLoading } = useFamiliesQuery();
if (error) {
  toast.error("Errore nel caricamento delle famiglie");
}
```

### State Management
- **TanStack Query**: Server state with intelligent caching, background updates
- **React Context**: Authentication state sharing across components
- **Local State**: Component-specific state with useState/useReducer
- **Form State**: TanStack Form for complex form management
- **Table State**: TanStack Table for data grid state

### Performance Optimizations
- **Query Invalidation**: Smart cache updates on mutations
- **Stale Time**: 5-minute default for user data, 1-minute for events
- **Parallel Queries**: Multiple simultaneous data fetching
- **Code Splitting**: Route-based lazy loading with TanStack Router
- **Virtualization**: Large list rendering optimization
- **Background Refetch**: Keep data fresh without blocking UI

## Security Features

### Authentication Security
- **Phone-only authentication**: No password vulnerabilities
- **OTP verification**: 6-digit codes, 5-minute expiry
- **Session management**: IP tracking, user agent validation
- **CSRF protection**: Built-in Better Auth protection
- **Secure cookies**: httpOnly, secure, sameSite configuration

### Authorization
- **Role-based access control**: Organization-scoped permissions
- **Family membership validation**: Access control for family data
- **Resource-level permissions**: Fine-grained access control
- **Admin action logging**: Audit trail for administrative actions

### Data Protection
- **SQL injection prevention**: Drizzle ORM parameterized queries
- **Input validation**: Zod schemas for all inputs
- **Output sanitization**: XSS prevention
- **CORS configuration**: Controlled cross-origin requests
- **Rate limiting**: API endpoint protection

## Deployment & Configuration

### Environment Setup
```typescript
// /server/src/env.ts
export const env = {
  BASE_URL: process.env.BASE_URL || "http://localhost:3000",
  AUTH_SECRET: process.env.AUTH_SECRET!,
  AUTH_TRUSTED_ORIGINS: process.env.AUTH_TRUSTED_ORIGINS || "http://localhost:5173",
  DATABASE_URL: process.env.DATABASE_URL || "./db/database.db",
  NODE_ENV: process.env.NODE_ENV || "development",
};
```

### Database Management
```bash
# Development commands
bun db:generate  # Generate Drizzle migrations
bun db:migrate   # Apply migrations to database
bun db:seed      # Seed initial data (roles, test users)
bun db:reset     # Reset database and reseed
bun db:studio    # Open Drizzle Studio for data inspection

# Production commands
bun db:push      # Push schema changes directly
bun start        # Production server start
```

### Build Process
- **Frontend**: Vite build with TypeScript checking, code splitting
- **Backend**: Bun compilation with bytecode generation for performance
- **Type Generation**: Automatic ORPC router type generation
- **Asset Optimization**: Image optimization, CSS minification
- **Bundle Analysis**: Size analysis and optimization

## Unique Features

### Phone-First Authentication
- **No passwords**: Eliminates password-related security issues
- **SMS OTP verification**: Secure phone number verification
- **Temporary email generation**: Automatic email creation from phone numbers
- **Seamless onboarding**: Quick user registration flow

### Comprehensive Child Safety
- **Medical information tracking**: Allergies, medical notes, emergency contacts
- **Authorized person system**: Detailed pickup authorization with relationships
- **Event-specific authorization**: Per-event pickup person selection
- **Emergency contact hierarchy**: Multiple contact methods and relationships

### Organization Multi-tenancy
- **Multiple parishes support**: Single installation, multiple organizations
- **Role-based permissions**: Different permissions per organization
- **Invitation system**: Secure organization joining process
- **Centralized user management**: Cross-organization user handling

### Advanced Event Management
- **Age-based filtering**: Automatic child eligibility checking
- **Dynamic capacity management**: Real-time availability tracking
- **Waitlist functionality**: Automatic promotion when spots open
- **Payment integration**: Comprehensive payment status tracking
- **Detailed registration tracking**: Full audit trail of registrations

### Modern Development Experience
- **Full Type Safety**: End-to-end TypeScript with ORPC
- **Hot Module Replacement**: Instant development feedback
- **Component Development**: Isolated component development with shadcn/ui
- **Database Introspection**: Visual database management with Drizzle Studio
- **API Documentation**: Automatic API docs with Swagger integration

This application represents a modern, type-safe, and secure solution for church event management with a strong focus on child safety, organizational efficiency, and developer experience.

